// applies global styles that cannot be applied from within the shadow dom
@mixin core($overrides: ()) {
  .berg-layout-resizing-vertical,
  .berg-layout-resizing-horizontal {
    .berg-panel {
      transition-property: none;
    }
  }

  @include resizing-core($overrides);
  @include positioning-core();
}

@mixin positioning-core() {
  .berg-panel-top,
  .berg-panel-right,
  .berg-panel-bottom,
  .berg-panel-left {
    position: fixed;
  }

  .berg-panel-top {
    top: 0;
    right: var(--berg-panel-right-size);
    left: var(--berg-panel-left-size);
    height: var(--berg-panel-top-size);
    min-height: var(--berg-panel-top-size);
    max-height: var(--berg-panel-top-size);

    &.berg-panel-top-above-left {
      left: 0;
    }

    &.berg-panel-top-above-right {
      right: 0;
    }

    &.berg-panel-absolute {
      ~ .berg-panel-center {
        padding-top: 0;
      }
    }
  }

  .berg-panel-right {
    right: 0;
    top: 0;
    bottom: 0;
    width: var(--berg-panel-right-size);
    min-width: var(--berg-panel-right-size);
    max-width: var(--berg-panel-right-size);

    &.berg-panel-top-above-right {
      top: var(--berg-panel-top-size);
    }

    &.berg-panel-bottom-below-right {
      bottom: var(--berg-panel-bottom-size);
    }

    &.berg-panel-absolute {
      top: 0;
      bottom: 0;

      ~ .berg-panel-top,
      ~ .berg-panel-bottom {
        right: 0;
      }

      ~ .berg-panel-center {
        padding-right: 0;
      }
    }
  }

  .berg-panel-bottom {
    bottom: 0;
    right: var(--berg-panel-right-size);
    left: var(--berg-panel-left-size);
    height: var(--berg-panel-bottom-size);
    min-height: var(--berg-panel-bottom-size);
    max-height: var(--berg-panel-bottom-size);

    &.berg-panel-bottom-below-left {
      left: 0;
    }

    &.berg-panel-bottom-below-right {
      right: 0;
    }

    &.berg-panel-absolute {
      left: 0;
      right: 0;

      ~ .berg-panel-center {
        padding-bottom: 0;
      }
    }
  }

  .berg-panel-left {
    left: 0;
    top: 0;
    bottom: 0;
    width: var(--berg-panel-left-size);
    min-width: var(--berg-panel-left-size);
    max-width: var(--berg-panel-left-size);

    &.berg-panel-top-above-left {
      top: var(--berg-panel-top-size);
    }

    &.berg-panel-bottom-below-left {
      bottom: var(--berg-panel-bottom-size);
    }

    &.berg-panel-absolute {
      top: 0;
      bottom: 0;

      ~ .berg-panel-top,
      ~ .berg-panel-bottom {
        left: 0;
      }

      ~ .berg-panel-center {
        padding-left: 0;
      }
    }
  }

  .berg-panel-center {
    padding-top: var(--berg-panel-top-size);
    padding-right: var(--berg-panel-right-size);
    padding-bottom: var(--berg-panel-bottom-size);
    padding-left: var(--berg-panel-left-size);
  }
}

@mixin resizing-core($overrides) {
  $resizing-indicator-size: map-get($overrides, 'resizing-indicator-size') or
    6px;

  .berg-panel-snap-collapsed {
    .berg-panel-resize-toggle-right {
      left: -#{$resizing-indicator-size};
    }

    .berg-panel-resize-toggle-bottom {
      top: -#{$resizing-indicator-size};
    }
  }

  .berg-panel-resize-toggle {
    position: absolute;
    z-index: 2;
  }

  .berg-panel-resize-toggle-left,
  .berg-panel-resize-toggle-right {
    top: 0;
    bottom: 0;
    width: $resizing-indicator-size;
  }

  .berg-panel-resize-toggle-right {
    left: 0;
  }

  .berg-panel-resize-toggle-left {
    right: -#{$resizing-indicator-size};
  }

  .berg-panel-resize-toggle-top,
  .berg-panel-resize-toggle-bottom {
    right: 0;
    left: 0;
    height: $resizing-indicator-size;
  }

  .berg-panel-resize-toggle-top {
    bottom: -#{$resizing-indicator-size};
  }

  .berg-panel-resize-toggle-bottom {
    top: 0;
  }
}
